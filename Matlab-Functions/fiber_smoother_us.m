function [smoothed_fiber_all_pixels, smoothed_fiber_all_mm, coeff_c_pixels, coeff_r_pixels, coeff_x_mm, coeff_y_mm] = ...
    fiber_smoother_us(fiber_all, image_info_struc, fs_options, image_doub, roi_struc, fv_options)
%
%FUNCTION fiber_smoother_us
% [smoothed_fiber_all_pixels, smoothed_fiber_all_mm, coeff_c_pixels, coeff_r_pixels, coeff_x_mm, coeff_y_mm] = ...
%    fiber_smoother_us(fiber_all, image_info_struc, fs_options, image_doub, roi_struc, fv_options)
%
%USAGE
%  The function fiber_smoother_us is used to smooth fiber tracts and increase
%  the spatial resolution of fiber tracts generated using the MuscleUS_Toolbox.
%
%  The user inputs the fiber tracts generated by fiber_track_us, a structure
%  containing the image metadata, and a structure with options for implementing
%  the polynomial fitting routines.  The [row column] positions are separately
%  fitted to Nth-order polynomials as functions of pixel-distance along the
%  tract. The user selects the polynomial order separately for the row and
%  column positions. Also, the fiber tract positions are converted to units
%  of mm and the polynomial fitting procedures are repeated.
%
%  For both fitting procedures, The function returns the smoothed fiber tracts
%  and matrices containing the polynomial coefficients for each tract.
%
%INPUT ARGUMENTS
%  fiber_all: The original fiber tracts, output from fiber_track_us
%
%  image_info_struc: The output caontaining image metadata, output from
%   read_dicom_us
%
%  fs_options: a structure containing the following fields:
%    interp_distance: An interpolation interval for the fitted fiber tracts,
%      in units of mm.
%
%    poly_order: A 2-element vector containing the polynomial orders, [Nr Nc],
%      to use when fitting the tracts
%
%  image_doub, roi_struc (optional): The double-precision image and a structure
%    containing information about the aponeurosis surface. If included,
%    fiber_visualizer_us is automatically called so that the smoothed tracts
%    can be visualized.
%
%  fv_options: As defined in fiber_visualizer_us
%
%OUTPUT ARGUMENTS
%  smoothed_fiber_all_pixels, smoothed_fiber_all_mm: The fiber tracts following
%   Nth order polynomial fitting, with units of pixels and mm, respectively
%
%  coeff_c_pixels, coeff_x_mm: Matrices of the Nth order polynomial coefficients
%   for the tracts' column/X positions, with units of pixels and mm,
%   respectively
%
%  coeff_r_pixels, coeff_y_mm: Matrices of the Nth order polynomial coefficients
%   for the tracts' row/Y positions, with units of pixels and mm, respectively
%
%VERSION INFORMATION
%  v. 0.1
%
%ACKNOWLEDGEMENTS
%  People: Bruce Damon, Hannah Kilpatrick
%  Grant support: NIH/NIAMS R01 AR073831

%% get options
poly_order = fs_options.poly_order;
interp_distance = fs_options.interp_distance;
interp_pixels = interp_distance/image_info_struc.PixelSpacingX;

%%
coeff_c_pixels = zeros(length(fiber_all(:,1,2)), poly_order(1)+1);
coeff_r_pixels = zeros(length(fiber_all(:,1,1)), poly_order(2)+1);
coeff_x_mm = zeros(length(fiber_all(:,1,2)), poly_order(1)+1);
coeff_y_mm = zeros(length(fiber_all(:,1,1)), poly_order(2)+1);

for track_cntr=1:length(fiber_all(:,1,1))

    if length(nonzeros(fiber_all(track_cntr,:,2)))>10

        loop_track_points = [nonzeros(fiber_all(track_cntr,:,1)) nonzeros(fiber_all(track_cntr,:,2))];
        loop_track_mm = 0*loop_track_points;
        loop_track_mm(:,2) = loop_track_points(:,1)*image_info_struc.PixelSpacingY;
        loop_track_mm(:,1) = loop_track_points(:,2)*image_info_struc.PixelSpacingX;

        track_length_points = [0; cumsum((diff(loop_track_points(:,1)).^2 + diff(loop_track_points(:,2)).^2).^0.5)];
        coeff_c_pixels(track_cntr,:) = polyfit(track_length_points, loop_track_points(:,2), poly_order(1));
        coeff_r_pixels(track_cntr,:) = polyfit(track_length_points, loop_track_points(:,1), poly_order(2));

        smoothed_track_points=[];
        smoothed_track_points(:,1) = polyval(coeff_r_pixels(track_cntr,:), 0:interp_pixels:max(track_length_points));
        smoothed_track_points(:,2) = polyval(coeff_c_pixels(track_cntr,:), 0:interp_pixels:max(track_length_points));
        smoothed_fiber_all_pixels(track_cntr, 1:length(smoothed_track_points), :) = smoothed_track_points; %#ok<AGROW>

        track_length_mm = [0; cumsum((diff(loop_track_mm(:,1)).^2 + diff(loop_track_mm(:,2)).^2).^0.5)];
        coeff_x_mm(track_cntr,:) = polyfit(track_length_mm, loop_track_mm(:,1), poly_order(2));
        coeff_y_mm(track_cntr,:) = polyfit(track_length_mm, loop_track_mm(:,2), poly_order(1));
        smoothed_track_mm=[];
        smoothed_track_mm(:,1) = polyval(coeff_x_mm(track_cntr,:), 0:interp_distance:max(track_length_mm));
        smoothed_track_mm(:,2) = polyval(coeff_y_mm(track_cntr,:), 0:interp_distance:max(track_length_mm));
        smoothed_fiber_all_mm(track_cntr, 1:length(smoothed_track_mm), :) = smoothed_track_mm; %#ok<AGROW>

    end

end

%% view results

if nargin>3

    fiber_visualizer_us(image_doub, fv_options, smoothed_fiber_all_pixels, roi_struc)

end

%% end frunction
return;
